@document.meta
  title: extended_informed_search
  description:
  authors: viv
  categories:
  created: 2022-04-16
  version: 0.0.11
@end

* Search Problem
 - states within the world, or parts that are within the world
  - Actions and costs - encoded within our successor function, what happens when we you go  to the next state
  - Successor function, and world functions
  - Start state and goal test
** Search tree
   - Nodes : represent plans of reaching states
   - Planes have costs with each action,
** Search algorithm
   - Something that builds this search tree
   - DFS, BFS , IDFS , Depth limited and uniform
   -- How they paradise from how they pick out data from the fringe [ frontier list ]
   - Optimal finds the least cost plan -> Guaranteed to find the least cost
  @code
  function tree_search [ problem , state]
    get search tree and initial state
    loop do
      if there are no values for expansion and then
          return fail
          else if the node contains the goal state then return the corresponding solution
        else:
            keep expanding the node and keep going till you find the right values
  @end
  Tree search >:
   DFS and BFS are pretty much the same, depends on the right strat, to get everything to return all the values, which would eval all your strats .



* Heuristic
   a Rule of thumb : a function is something you do, something you do to follow a given rule
  A function that maps a state to real members.

  It is something that will tell you about the state or tell you how close you are towards the given goal


  Main thing is that you have to make them designed for each design problem . It would then define how clever the problem is : each problem has its own heuristic that it would have to work wit .

  - Far away from the goal = high score high cost

  - Close to the goal = low score low cost

  -- Heuristics are a point of estimate : they give us a guide on where we have to go to some place

** Greedy
   - Tree Search
     Guided by heuristic

   - You build the search tree but only from the heuristic value, nothing else
   - Greedy is a way to select what node to expand first : so you state what heuristic value would be
   -- and that would be the next thing that you would expand

  - Main issue is that you can get a huge loop, or circular motion with this

  ___
   ~ Greedy does not account for the traversal that has already occurred .
   ~ You merely look ahead, you do not look at what you went through
  ___
   Greedy search is like depth first search, you keep moving down the deeper tree, but you would have to go through the entire tree if it would have to .

   - it would go deep to where it thinks where the goal would be
   - you have to makes use that the heuristics are valid and sound
   - Worst case likely badly guided depth first search

** A star
   Is a combination of uniform cost search and greedy cost search, thing is to note it knows what is the cheapest point to go by: its a pretty cools search.

   Think of the turtle and the rabbit: think back to how that works

   Combining UCS and Greedy together:
   {image}[img/2022-04-16-21-53-14.png]

   - Uniform cost orders by path cost, or backwards cost g(n)
   - Greedy orders by goal proximity or forward cost h(n)

   /Now lets be big brain and combine them/.

   A* orders by the sum of both g(n) and h(n)
   @code
   a* = sum(g, h)
   @end
   A star will go through each point and go over each one to check what is the most optimal point between both the g(n) and h(n) value, to go over and to expand.

   A* is faster and better than uniform cost search . - uniform cost search is a way to get there, Uniform cost search is a A* with a really shit version of A*, so you have a really bad version of A* . So you have the worst heuristic possible , and that is pretty much what Uniform search.

   Important note
   - */Our heuristic value would have to be admissible, heuristic. What that means is that we can never
   overestimate the true cost of what the value is, but we are allowed to underestimate values./*

   - */Another thing to note is our heuristic value should be Consistent, meaning that it is monotonic, what
   that means is if it is monotonic, it means we have good heuristic properties./*
